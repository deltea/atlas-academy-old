---
import BaseLayout from "$layouts/BaseLayout.astro";
import PageCover from "$components/PageCover.astro";
import PostContent from "$components/PostContent.svelte";
import PostNavigation from "$components/PostNavigation.astro";
import Comments from "$components/Comments.svelte";
import { formatDate } from "$lib/utils";
import { notion } from "$lib/notion";
import { isFullBlock, isFullPage, isFullPageOrDatabase } from "@notionhq/client";
import type { InferGetStaticPropsType } from "astro";
import type {
  PartialBlockObjectResponse,
  BlockObjectResponse,
  RichTextItemResponse,
RelationPropertyItemObjectResponse,
TitlePropertyItemObjectResponse,
DatePropertyItemObjectResponse,
FilesPropertyItemObjectResponse
} from "@notionhq/client/build/src/api-endpoints"

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export async function getStaticPaths() {
  function renderBlock(block: PartialBlockObjectResponse | BlockObjectResponse) {
    if (!isFullBlock(block)) return;

    if (block.type === "paragraph" && block.paragraph.rich_text.length > 0) {
      return `<p>${block.paragraph.rich_text[0].plain_text}</p>`;
    } else if (block.type === "heading_1" && block.heading_1.rich_text.length > 0) {
      return `<h1>${block.heading_1.rich_text[0].plain_text}</h1>`;
    } else if (block.type === "image") {
      return `<img
        src="${block.image.type === "external" ? block.image.external.url : block.image.file.url}"
        alt="${block.image.caption}" />`;
    }
  }

  const entries = await notion.databases.query({
    database_id: import.meta.env.NOTION_POSTS_DATABASE_ID
  });

  interface Properties {
    Destination: { relation: RelationPropertyItemObjectResponse[] },
    Slug: { rich_text: RichTextItemResponse[] },
    Name: { title: RichTextItemResponse[] },
    Date: DatePropertyItemObjectResponse,
    Cover: FilesPropertyItemObjectResponse,
    Podcast: { rich_text: RichTextItemResponse[] },
  }

  return await Promise.all(entries.results.map(async page => {
    if (!isFullPageOrDatabase(page)) return;

    const properties = page.properties as unknown as Properties;

    const destinationPage = await notion.pages.retrieve({
      page_id: properties.Destination.relation[0].id,
    });
    const destination = isFullPage(destinationPage) && destinationPage.properties.Slug.type === "rich_text" &&  destinationPage.properties.Slug.rich_text[0].plain_text;

    const content = (await notion.blocks.children.list({
      block_id: page.id,
    })).results.map(x => renderBlock(x)).join("");

    return {
      params: { slug: properties.Slug.rich_text[0].plain_text },
      props: {
        title: properties.Name.title[0].plain_text,
        date: formatDate(properties.Date.date?.start ?? ""),
        cover: properties.Cover.files[0].type === "file" && properties.Cover.files[0].file.url,
        podcast: properties.Podcast.rich_text[0].href ?? "",
        destination,
        content,
      },
    }
  }));
}

const { slug } = Astro.params;
const { content, title, date, cover, destination, podcast } = Astro.props;
---

<BaseLayout title={title}>
  <PageCover center cover={cover} slot="before-content">
    <div class="text-base tracking-widest">
      <time class="inline">{date}</time>
      <span>|</span>
      <a href={`/destinations/${destination}`} class="inline">
        {destination}
      </a>
    </div>

    <h1>{title}</h1>
  </PageCover>

  <PostContent
    client:load
    content={content}
    podcast={podcast} />

  <hr class="dark:border-neutral-600 mx-lg">

  <Comments post={slug ?? ""} client:load />

  <PostNavigation slug={slug} />
</BaseLayout>
