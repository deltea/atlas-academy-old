---
import BaseLayout from "$layouts/BaseLayout.astro";
import PageCover from "$components/PageCover.astro";
import PostContent from "$components/PostContent.svelte";
import PostNavigation from "$components/PostNavigation.astro";
import { contentfulClient } from "$lib/contentful";
import { image } from "$lib/utils";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import { BLOCKS } from "@contentful/rich-text-types";
import type { BlogPost } from "$lib/contentful";
import type { InferGetStaticPropsType } from "astro";

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
  });

  const pages = entries.items.map(item => ({
    params: { slug: item.fields.slug },
    props: {
      title: item.fields.title,
      content: documentToHtmlString(item.fields.content, {
        renderNode: {
          [BLOCKS.EMBEDDED_ASSET]: (node) => {
            const url = node.data.target.fields.file?.url;
            const alt = node.data.target.fields.title ?? "";

            return (
              url ?

              // Actual image
              `<img
                src="${image(url)}"
                alt="${alt}"
                class="w-full h-full object-cover"/>` :

              // Placeholder
              `<div class="border-dashed border-neutral dark:border-white border-2 w-full h-96 flex flex-col justify-center items-center rounded-lg">
                <h1 class="font-bold text-3xl">Sorry, it looks like no image was found :(</h1>
              </div>`
            );
          },
        },
      }),
      date: new Date(item.fields.date).toLocaleDateString(),
      cover: item.fields.cover?.fields.file?.url,
      destination: item.fields.destination?.fields.slug,
      podcasts: item.fields.podcast ?? [],
    },
  }));

  return pages;
}

const { slug } = Astro.params;
const { content, title, date, cover, destination, podcasts } = Astro.props;
---

<BaseLayout title={title}>
  <PageCover center cover={cover} slot="before-content">
    <div class="text-base tracking-widest">
      <time class="inline">{date}</time>
      <span>|</span>
      <a href={`/destinations/${destination}`} class="inline">
        {destination}
      </a>
    </div>

    <h1>{title}</h1>
  </PageCover>

  <PostContent client:load content={content} podcasts={podcasts} />

  <PostNavigation slug={slug} />
</BaseLayout>
